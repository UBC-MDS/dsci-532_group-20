pull(age)%>%
mean()%>%
round(4)
popoulation_mean<- popoulation%>%
pull(age)%>%
mean()%>%
round(4)
popoulation_mean<-
popoulation %>%
pull(age) %>%
mean() %>%
round(4)
popoulation_mean
ggplot(popoulation, aes(x=age)+
geom_histogram(bin=50)
population_hist<- ggplot(popoulation, aes(x=age)+
geom_histogram(bin=50)
population_hist
population_hist<- ggplot(popoulation, aes(x=age)+
geom_histogram(binwidth = =50)
population_hist
ggplot(popoulation, aes(x=age)+
geom_histogram(binwidth = =50)
ggplot(popoulation, aes(x=age)+
geom_histogram(binwidth =.50)
ggplot(popoulation, aes(x=age)+
geom_histogram(binwidth = 50)
graph<- ggplot(popoulation, aes(x=age)+
geom_histogram(binwidth = 50)
graph
library(datateachr)
library(infer)
library(tidyverse)
library(ggplot2)
set.seed(1234)
popoulation<-
tibble(age= (rexp(1000000, rate = 0.1)^2)+65)%>%
filter(age <= 118, age>=65)
popoulation_mean<-
popoulation %>%
pull(age) %>%
mean() %>%
round(4)
popoulation_mean
graph<- ggplot(popoulation, aes(x=age)+
geom_histogram(binwidth = 50)
graph
ggplot(popoulation, aes(x=age)+
geom_histogram(binwidth = 50)
ggplot(popoulation, aes(x=age)+
geom_histogram(binwidth = .50)
g<- ggplot(popoulation, aes(x=age)+
geom_histogram(binwidth = .50)
g
g <- ggplot(popoulation, aes(x=age)+ geom_histogram(binwidth = .50)
g
g <- ggplot(popoulation, aes(x=age)+ geom_histogram()
g
library(datateachr)
library(infer)
library(tidyverse)
library(ggplot2)
set.seed(1234)
popoulation<-
tibble(age= (rexp(1000000, rate = 0.1)^2)+65)%>%
filter(age <= 118, age>=65)
popoulation_mean<-
popoulation %>%
pull(age) %>%
mean() %>%
round(4)
popoulation_mean
g <- ggplot(popoulation, aes(x=age)+ geom_histogram()
g
knitr::opts_chunk$set(echo = TRUE)
library(broom)
library(infer)
library(knitr)
library(palmerpenguins)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
#load data
poll_data <- read.csv("data/angus_reid_poll.csv")
head(poll_data)
#get sample estimate and n's and standard error
estimate <- poll_data %>%
group_by(party) %>%
summarise(poll_por = n()/714) %>%
mutate(se= sqrt(poll_por*(1- poll_por)/n()))
estimate
#95% confidence interval
confidence <- estimate %>%
mutate(lower= poll_por- (1.96* se),
upper= poll_por+ (1.96* se ))
confidence
#plot
#bargraph <- ggplot(confidence , aes(x = party, y = mean)) +
#  geom_bar(stat = "identity") +
#  geom_errorbar(data = confidence ,
# mapping = aes(ymin = lower_ci,
#     ymax = upper_ci),
# width = 0.1)+
# labs(title = "The estimate and confidence intervals by parties")
#bargraph
#load data
poll_data <- read.csv("data/angus_reid_poll.csv")
head(poll_data)
#get sample estimate and n's and standard error
estimate <- poll_data %>%
group_by(party) %>%
summarise(poll_por = n()/714) %>%
mutate(se= sqrt(poll_por*(1- poll_por)/714)
estimate
#load data
poll_data <- read.csv("data/angus_reid_poll.csv")
head(poll_data)
#get sample estimate and n's and standard error
estimate <- poll_data %>%
group_by(party) %>%
summarise(poll_por = n()/714) %>%
mutate(se= sqrt(poll_por*(1- poll_por)/714))
estimate
#95% confidence interval
confidence <- estimate %>%
mutate(lower= poll_por- (1.96* se),
upper= poll_por+ (1.96* se ))
confidence
#plot
#bargraph <- ggplot(confidence , aes(x = party, y = mean)) +
#  geom_bar(stat = "identity") +
#  geom_errorbar(data = confidence ,
# mapping = aes(ymin = lower_ci,
#     ymax = upper_ci),
# width = 0.1)+
# labs(title = "The estimate and confidence intervals by parties")
#bargraph
devtools::install_github("hadley/reshape")
install.packages("ggthemes")
library(onewaytests)
install.packages("onewaytests")
install.packages("Hmisc")
knitr::opts_chunk$set(echo = FALSE)
library(knitr)
library(kableExtra)
library(tidyverse)
library(caret)
install.packages("caret")
knitr::opts_chunk$set(echo = FALSE)
library(knitr)
library(kableExtra)
library(tidyverse)
library(caret)
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library(qqplotr))
suppressPackageStartupMessages(library(AER))
suppressPackageStartupMessages(library(MASS))
library(tidyverse, quietly = TRUE)
library(broom)
library(performance)
library(qqplotr)
library(cowplot)
# Your answer goes here.
(1/(0.15*sqrt(2*pi)))^2*exp(-(1.78-1.85)^2/(2*0.15^2))*exp(-(1.95-1.85)^2/(2*0.15^2))
# Do not delete this.
set.seed(123)
# Calculates the likelihood function of a normal distribution with a known standard deviation sigma.
# @param mu_sequence -> A vector of mu points to calculate the likelihood at.
# @param sigma -> A scalar for the known population standard deviation sigma.
# @param x -> A vector of the fixed sample to be used in the likelihood function.
# @return data -> A tibble with two columns, mu and the respective likelihood values.
gaussian_likelihood_mu <- function(mu_sequence, sigma, x) {
likelihood <- NULL
index <- 1
for (m in mu_sequence) {
likelihood[index] <- prod(dnorm(x, mean = m, sd = sigma))
index <- index + 1
}
data <- tibble(mu = mu_sequence, likelihood = likelihood)
return(data)
}
# Your answer goes here.
normal_sample_x <- rnorm(10, mean=1.85, sd=0.15)
mu_sequence <- seq(mean(normal_sample_x) - 0.15, mean(normal_sample_x) + 0.15, 0.001)
likelihood_values_mu <- gaussian_likelihood_mu(mu_sequence,0.15,normal_sample_x)
likelihood_values_mu
#plot
options(repr.plot.height = 5, repr.plot.width = 20)
(like_mu_plot <- ggplot(likelihood_values_mu, aes(x = mu, y = likelihood)) +
geom_line() +
theme(
plot.title = element_text(size = 21, face = "bold"),
axis.text = element_text(size = 15),
axis.title = element_text(size = 21)
) +
geom_vline(xintercept = mean(normal_sample_x), color = "red", size = 0.5) +
ggtitle("Likelihood Values") +
labs(x = expression(mu), y = "Likelihood Value"))
#mean
mean(normal_sample_x)
# Do not delete this.
set.seed(456)
# Your function `gaussian_likelihood_sigma()` goes here, do not forget to document it.
# Calculates the likelihood function of a normal distribution with a known mean.
# @param mu -> A scalar for the known population mean mu.
# @param sigma_sequence -> A vector of sigma points to calculate the likelihood at.
# @param x -> A vector of the fixed sample to be used in the likelihood function.
# @return data -> A tibble with two columns, sigma and the respective likelihood values.
gaussian_likelihood_sigma <- function( mu, sigma_sequence, x) {
likelihood <- NULL
index <- 1
for (s in sigma_sequence) {
likelihood[index] <- prod(dnorm(x, mean = mu, sd = s))
index <- index + 1
}
data <- tibble(sigma = sigma_sequence, likelihood = likelihood)
return(data)
}
# Your data simulation, tibble construction, and plotting go here.
normal_sample_x_2 <- rnorm(20, mean=1.73, sd=0.2)
sigma_sequence <- seq(0.01, 0.5, 0.01)
likelihood_values_sigma <- gaussian_likelihood_sigma(1.73,sigma_sequence,normal_sample_x_2)
likelihood_values_sigma
#Standard deviation
observed_sd = sqrt(sum((normal_sample_x_2 - mean(1.73))^2) / 20)
observed_sd
#plot
options(repr.plot.height = 5, repr.plot.width = 20)
(like_sigma_plot <- ggplot(likelihood_values_sigma, aes(x = sigma, y = likelihood)) +
geom_line() +
theme(
plot.title = element_text(size = 21, face = "bold"),
axis.text = element_text(size = 15),
axis.title = element_text(size = 21)
) +
geom_vline(xintercept = observed_sd, color = "red", size = 0.5) +
ggtitle("Likelihood Values") +
labs(x = expression(sigma), y = "Likelihood Value"))
# Do not delete this.
set.seed(123)
# Generates samples of different samples sizes n = 10, 30, 50, ..., 30000 from a probability distribution.
# @param dist -> The desired probability distribution (e.g., rnorm, rpois, rexp, ...).
# @param ... -> The arguments to be used by the dist function.
# @return data -> A tibble with two columns, values and sample_size.
#
# EXAMPLE:  samples_of_different_sizes(rnorm, 123, 3), where 123 is the mean mu and 3 is the std dev sigma.
samples_of_different_sizes <- function(dist, ...) {
dist <- match.fun(dist)
sample_sizes <- seq(10, 30000, 20)
it <- 0
values <- list()
for (n in sample_sizes) {
it <- it + 1
values[[it]] <- tibble(value = dist(n, ...), sample_size = n)
}
data <- bind_rows(values)
return(data)
}
# Your answer goes here.
# Generating samples of different samples sizes
samples_tibble <- samples_of_different_sizes(rnorm, 0, 10)
samples_tibble
# Calculating the likelihood for each sample size
MLE_tibble <- samples_tibble %>%
group_by(sample_size) %>%
summarise(MLE_var = (var(value) * ((n()-1) / (n()))))
MLE_tibble
#plot
options(repr.plot.height = 5, repr.plot.width = 20)
(variances_plot <- ggplot(var_data, aes(x = sample_sizes, y = biased_sample_variance)) +
geom_line() +
theme(
plot.title = element_text(size = 21, face = "bold"),
axis.text = element_text(size = 15),
axis.title = element_text(size = 21)
) +
geom_hline(yintercept = 10**2, color = "red", size = 1) +
ggtitle("MLE of Variance") +
labs(x = "Sample Size", y = "MLE of Variance"))
#plot
ggplot(MLE_tibble, aes(x = sample_size, y = MLE_var)) +
geom_line() +
theme(
plot.title = element_text(size = 18, face = "bold"),
axis.text = element_text(size = 15),
axis.title = element_text(size = 18)
) +
ggtitle("Likelihood Values") +
labs(x = "Sample Size", y = "Likelihood Value") +
geom_hline(yintercept = 100,
size = 0.7,
colour = "red")
fat_content <- read_csv("milk_fat.csv")
head(fat_content)
initial_model <- lm(fat ~ week, data = fat_content)
tidy(initial_model)
glance(initial_model)
log_response_model <- lm(log(fat) ~ week, data = fat_content)
tidy(log_response_model)
glance(log_response_model)
# Your answer goes here.
wood_model <- lm(log(fat) ~ week + log(week),data=fat_content)
# Your coding answer goes here.
wood <- wood_model %>% tidy()
wood
#model
glance(wood_model)
# Your answer goes here.
initial_model_predictions <- predict(initial_model,newdata = tibble(week = 1:45))
MSE <- glance(log_response_model)$sigma^2
log_response_predictions <- predict(log_response_model, newdata = tibble(week = 1:45))
log_response_predictions <- exp(log_response_predictions + 0.5 * MSE)
MSE <- glance(wood_model)$sigma^2
wood_predictions <- predict(wood_model, newdata = tibble(week = 1:45))
wood_predictions <- exp(wood_predictions + 0.5 * MSE)
predictions_milk_fat <- tibble(
predictions = c(initial_model_predictions,
log_response_predictions,
wood_predictions),
week = rep(seq(1,45),3),
model = c(rep('Initial Model',45),rep('Log-Response Model',45),rep('Wood Model',45))
)
predictions_milk_fat
# Your answer goes here.
options(repr.plot.height = 4, repr.plot.width = 40)
(plot_fat_content <- fat_content %>%
ggplot(aes(week, fat)) +
geom_point() +
labs(x = "Week", y = "Average Fat Yield (kg/day)") +
ggtitle("Average Daily Fat Yield") +
geom_vline(xintercept = 35, color = "gray", linetype = "dashed", size = 1) +
geom_hline(yintercept = 0, color = "gray", linetype = "dashed", size = 1) +
theme(
plot.title = element_text(size = 24, face = "bold"),
axis.text = element_text(size = 14),
axis.title = element_text(size = 16)
))
# Your answer goes here.
options(repr.plot.height = 5, repr.plot.width = 20)
plot_fat_content + geom_line(predictions_milk_fat, mapping = aes(x = week, y = predictions, color = model))
# Your coding answer goes here.
anova(log_response_model, wood_model)
# Your coding answer goes here.
round(anova(log_response_model, wood_model), 4)
# Your coding answer goes here.
log_link_wood_model <- glm(fat ~ week + log(week), data = fat_content, family = gaussian(link = "log"))
log_link_wood_model
# Your coding answer goes here.
log_link_wood_model <- glm(fat ~ week + log(week), data = fat_content, family = gaussian(link = "log"))
log_link_wood_model
titanic <- read_csv("titanic.csv")
head(titanic)
# Your answer goes here.
ggplot(titanic, aes(factor(Survived), Fare)) +
geom_boxplot()+
facet_wrap(~Sex)+
labs(x = "Survived", y = "Fare") +
ggtitle("Fare vs Survived by Sex") +
theme(
plot.title = element_text(size = 24, face = "bold"),
axis.text = element_text(size = 14),
axis.title = element_text(size = 16)
)
# Your answer goes here.
ggplot(titanic, aes(x = Survived, y = Fare, group = Survived, color = Sex)) +
geom_boxplot() +
facet_wrap(~Sex) +
theme(
plot.title = element_text(size = 18, face = "bold"),
axis.text = element_text(size = 15),
axis.title = element_text(size = 18)
) +
ggtitle("Survival vs Fare by gender") +
ylim(0, 150)
# Your answer goes here.
options(repr.plot.height = 5, repr.plot.width = 20)
Titanic_scatterplot <-ggplot(titanic) +
geom_point(aes(Fare,Survived))+
geom_smooth(aes(Fare,Survived),method = "lm",
se = FALSE, color = "red") +
labs(x = "Fare",y = "Survived") +
ggtitle("Simple Linear Regression") +
theme(
plot.title = element_text(size = 24, face = "bold"),
axis.text = element_text(size = 14),
axis.title = element_text(size = 16))
Titanic_scatterplot
# Your answer goes here.
bin_log_model <- glm(Survived ~ Fare, data = titanic, family = binomial)
tidy(bin_log_model)
# Your answer goes here.
options(repr.plot.height = 5, repr.plot.width = 20)
Titanic_scatterplot <-ggplot(titanic) +
geom_point(aes(Fare,Survived))+
geom_smooth(aes(Fare,Survived),method = "lm",
se = FALSE, color = "red") +
geom_smooth(aes(Fare,Survived), method = "glm", method.args =
c(family = binomial), se = FALSE, color = "blue") +
labs(x = "Fare",y = "Survived") +
ggtitle("Simple Linear and Binomial Logistic Regression") +
theme(
plot.title = element_text(size = 24, face = "bold"),
axis.text = element_text(size = 14),
axis.title = element_text(size = 16))
Titanic_scatterplot
# Your answer goes here.
titanic$Sex <- as.factor(titanic$Sex) %>%
relevel(titanic$Sex, ref="male")
bin_log_model_2 <- glm(Survived ~ Fare + Sex, data = titanic, family = binomial)
# Your answer goes here.
titanic$Sex <- as.factor(titanic$Sex) %>%
relevel(titanic$Sex, ref="male")
bin_log_model_2 <- glm(Survived ~ Fare + Sex, data = titanic, family = binomial)
bin_log_model_2
# Your answer goes here.
round(anova(bin_log_model,
bin_log_model_2, test = "Chi"), 4)
# Your answer goes here.
tidy(bin_log_model_2) %>% mutate_if(is.numeric, round, 3)
# Your answer goes here.
tidy(bin_log_model_2) %>%
mutate_if(is.numeric, round, 3)
# Your answer goes here.
tidy(bin_log_model_2) %>% mutate_if(is.numeric, round, 3)
# Your answer goes here.
bin_log_model <- glm(Survived ~ Fare, data = titanic, family = binomial)
tidy(bin_log_model)
glance(bin_log_model)
# Your answer goes here.
round(exp(bin_log_model_2$coefficients), 2)
# Your answer goes here.
options(repr.plot.height = 5, repr.plot.width = 20)
(runs_works<- teams %>%
ggplot() +
geom_point(aes(runs, walks)) +
labs(y = "Total Number of Runs", x = "Total Number of Walks") +
ggtitle("Total number of Runs vs Walks") +
theme(
plot.title = element_text(size = 24, face = "bold"),
axis.text = element_text(size = 14),
axis.title = element_text(size = 16)
))
# Your answer goes here.
options(repr.plot.height = 5, repr.plot.width = 20)
(runs_walks <- teams %>%
ggplot() +
geom_point(aes(runs, walks)) +
labs(y = "Total number of runs", x = "Total number of walks") +
ggtitle("Total number of runs vs Total number of walks") +
theme(
plot.title = element_text(size = 18, face = "bold"),
axis.text = element_text(size = 15),
axis.title = element_text(size = 18)))
library(Lahman)
teams <- Teams %>%
select(runs = R, walks = BB, hits = H) %>%
as_tibble()
# Your answer goes here.
options(repr.plot.height = 5, repr.plot.width = 20)
(runs_walks <- teams %>%
ggplot() +
geom_point(aes(runs, walks)) +
labs(y = "Total number of runs", x = "Total number of walks") +
ggtitle("Total number of runs vs Total number of walks") +
theme(
plot.title = element_text(size = 18, face = "bold"),
axis.text = element_text(size = 15),
axis.title = element_text(size = 18)))
# Your answer goes here.
options(repr.plot.height = 5, repr.plot.width = 20)
(runs_walks <- teams %>%
ggplot() +
geom_point(aes(runs, walks)) +
labs(y = "Total number of runs", x = "Total number of walks") +
ggtitle("Total number of runs vs Total number of walks") +
theme(
plot.title = element_text(size = 18, face = "bold"),
axis.text = element_text(size = 15),
axis.title = element_text(size = 18)))
#runs vs hits
(runs_hits <- teams %>%
ggplot() +
geom_point(aes(runs, hits)) +
labs(y = "Total number of runs", x = "Total number of hits") +
ggtitle("Total number of runs vs Total number of hits") +
theme(
plot.title = element_text(size = 18, face = "bold"),
axis.text = element_text(size = 15),
axis.title = element_text(size = 18)))
# Your answer goes here.
dispersiontest(poisson_model)
# Your answer goes here.
dispersiontest(poisson_model)
# Your answer goes here.
tidy(poisson_model) %>% mutate_if(is.numeric, round, 3)
# Your answer goes here.
poisson_model <- glm(runs ~ walks + hits, family = poisson, data = teams)
poisson_model
# Your answer goes here.
tidy(poisson_model) %>% mutate_if(is.numeric, round, 3)
# Your answer goes here.
round(exp(poisson_model$coefficients), 2)
# Your answer goes here.
dispersiontest(poisson_model)
# Your answer goes here.
nb_model = glm.nb(runs ~ walks + hits, data = teams)
# Your answer goes here.
nb_model = glm.nb(runs ~ walks + hits, data = teams)
nb_model
# Your answer goes here.
tidy(poisson_model)
tidy(nb_model)
setwd("D:/MDS/Month4/DSCI_532_viz-2_students/dsci-532_group-20")
